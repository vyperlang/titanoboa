import os

import pytest

import boa
from boa import Env


@pytest.fixture(scope="module", autouse=True)
def forked_env(rpc_url):
    with boa.swap_env(Env()):
        block_id = 20102742  # some block we know the state of
        boa.env.fork(rpc_url, block_identifier=block_id)
        yield


@pytest.fixture(scope="module")
def api_key():
    return os.environ.get("ETHERSCAN_API_KEY")


# https://dashboard.tenderly.co/tx/mainnet/0xde001d295a15f427e613fa28adb12c8dbf6c03b9c1d647f438709eb444b747e8
def test_call_trace(api_key):
    boa.from_etherscan(
        "0x004c167d27ada24305b76d80762997fa6eb8d9b2",
        name="CurveTwocryptoOptimized",
        api_key=api_key,
    )
    boa.from_etherscan(
        "0x2005995a71243be9fb995dab4742327dc76564df",
        name="CurveTwocryptoMathOptimized",
        api_key=api_key,
    )
    boa.from_etherscan(
        "0x9e7ae8bdba9aa346739792d219a808884996db67",
        name="EIP173Proxy",
        api_key=api_key,
    )
    boa.from_etherscan(
        "0x9008d19f58aabd9ed0d60971565aa8510560ab41",
        name="GPv2Settlement",
        api_key=api_key,
    )
    boa.from_etherscan(
        "0x97effb790f2fbb701d88f89db4521348a2b77be8", name="Cvg", api_key=api_key
    )
    boa.from_etherscan(
        "0x9e7ae8bdba9aa346739792d219a808884996db67",
        name="GPv2AllowListAuthentication",
        api_key=api_key,
    )
    boa.from_etherscan(
        "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", name="WETH9", api_key=api_key
    )
    boa.from_etherscan(
        "0xc92e8bdf79f0507f65a392b0ab4667716bfe0110",
        name="GPv2VaultRelayer",
        api_key=api_key,
    )

    # todo: either use debug_tt or retrieve the tx input from the RPC
    computation = boa.env.execute_code(
        to_address="0x9008D19f58AAbD9eD0D60971565AA8510560ab41",
        sender="0x0DdcB0769a3591230cAa80F85469240b71442089",
        gas=585030,
        data=bytes.fromhex(
            "13d79a0b0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000000500000000000000000000000097effb790f2fbb701d88f89db4521348a2b77be8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000097effb790f2fbb701d88f89db4521348a2b77be8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000055e92b9edea6e3b00000000000000000000000000000000000000000000017cf4772bd7231858d200000000000000000000000000000000000000000000017cf4772bd7231858d2000000000000000000000000000000000000000000000000055e92b9edea6e3b00000000000000000000000000000000000000000000017e07b4ed0fd7590e2600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000006ce49a4e52d081e480ecef87db009e12a4799c9600000000000000000000000000000000000000000000017e07b4ed0fd7590e26000000000000000000000000000000000000000000000000055858d055ac670900000000000000000000000000000000000000000000000000000000666e957be4517e636d7dd7d91fb84d77f3ec728f828995a990541a837d5d3a5ecba75d8a0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017e07b4ed0fd7590e26000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000414cf1892377f3826e1fc54669003063ef523a92fec353774ed3bcf14d24a747951250fe68290e411fb919a740aceec258c78d9cb078abe2b13b9a51cd4bd377e91b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000004c167d27ada24305b76d80762997fa6eb8d9b20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000845b41b9080000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017cf4772bd7231858d2000000000000000000000000000000000000000000000000055e92b9edea6e3b00000000000000000000000000000000000000000000000000000000000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000242e1a7d4d000000000000000000000000000000000000000000000000055e92b9edea6e3b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000899055"  # noqa: E501
        ),
        is_modifying=True,
    )

    computation.trace.export_html("trace.html")
    assert computation.trace == ""  # TODO
